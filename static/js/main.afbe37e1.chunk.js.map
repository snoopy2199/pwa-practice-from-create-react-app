{"version":3,"sources":["components/HelloWorld.js","App.js","serviceWorker.js","index.js"],"names":["fateList","HelloWorld","_useState","useState","_useState2","Object","slicedToArray","isCopyBoxShowing","setIsCopyBoxShowing","_useState3","_useState4","fate","setFate","react_default","a","createElement","className","onClick","Math","floor","random","length","navigator","share","text","concat","defaultValue","App","promptEvent","setPromptEvent","useEffect","window","addEventListener","e","console","log","prompt","userChoice","then","choiceResult","outcome","src_components_HelloWorld","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.afbe37e1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './HelloWorld.css';\n\nconst fateList = [\n  '大吉', '中吉', '小吉', '吉', '末吉', '凶', '大凶',\n];\n\nconst HelloWorld = () => {\n  const [isCopyBoxShowing, setIsCopyBoxShowing] = useState(false);\n  const [fate, setFate] = useState('');\n\n  const chance = () => {\n    setIsCopyBoxShowing(false);\n    setFate(fateList[Math.floor(Math.random() * fateList.length)]);\n  };\n\n  const handleShare = () => {\n    if (navigator.share) {\n      navigator.share({\n        text: `我在「PWA (React)」(https://snoopy2199.github.io/pwa-practice-from-create-react-app/)抽到了「${fate}」`,\n      });\n    } else {\n      setIsCopyBoxShowing(true);\n    }\n  };\n\n  return (\n    <div className=\"hello\">\n      <div className=\"fate\">{fate}</div>\n      <div>\n        <button onClick={chance}>抽籤</button>\n        {fate && <button onClick={handleShare}>分享</button>}\n      </div>\n      {isCopyBoxShowing && (\n        <textarea\n          className=\"share-text\"\n          defaultValue={`我在「PWA (React)」(https://snoopy2199.github.io/pwa-practice-from-create-react-app/)抽到了「${fate}」`}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default HelloWorld;\n","import React, { useState, useEffect } from 'react';\nimport HelloWorld from './components/HelloWorld';\nimport './App.css';\n\nconst App = () => {\n  const [promptEvent, setPromptEvent] = useState(null);\n\n  const handlePromotion = () => {\n    promptEvent.prompt();\n    promptEvent.userChoice\n      .then((choiceResult) => {\n        if (choiceResult.outcome === 'accepted') {\n          console.log('User accepted the A2HS prompt');\n        } else {\n          console.log('User dismissed the A2HS prompt');\n        }\n        setPromptEvent(null);\n      });\n  }\n\n  useEffect(() => {\n    window.addEventListener('beforeinstallprompt', (e) => {\n      setPromptEvent(e);\n      console.log('beforeinstallprompt');\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        PWA (React)\n        {promptEvent && <button onClick={handlePromotion}>安裝</button>}\n      </div>\n      <HelloWorld />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}